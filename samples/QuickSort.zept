/*
  
  Name: QuickSort.zept

  Description: The program implements the quick sort algorithm as a recursive, iterative, 
               and 3-way recursive versions.
  
  Author: William F. Gilreath (will@zepton.xyz)

  Copyright Â© 2024 William F. Gilreath. All Rights Reserved.

  License: This software is subject to the terms of the GNU General Public License (GPL)
  version 3.0 available at the following link: http://www.gnu.org/copyleft/gpl.html.
  You must accept the terms of the GNU General Public License (GPL) license agreement
  to use this software.
  
*/

package xyz.zepton.samples;

prog QuickSort {

  //generate random integer array of N-integers within range of 0...max-1, using
  //  pseudo-random number generator with specific seed value.
  static int[] randomArray(final int N, final int max, final long seed) {

    Random rd = new Random(seed);

    int[] array = new int[N];
    for (int i = 0; i < array.length; i++) {
      array[i] = rd.nextInt(max);
    }//end for

    return array;

  }//end randomArray

  //simplest fixed for-loop bubble sort algorithm
  static void printArray(int[] in_array) {
    for (int i = 0; i < in_array.length; i++) {
      printf("%d ", in_array[i]);
    }//end for

    println();
  }//end printArray

  static void swap(int[] array, final int src, final int dst) {

    int temp = array[src];
    array[src] = array[dst];
    array[dst] = temp;

  }//end swap

  //partition using last integer as pivot element
  static int partition1(int[] array, int lower, int upper) {

    int pivot = array[upper];
    int i = (lower - 1); // index of smaller element
    for (int j = lower; j <= upper - 1; j++) {

      if (array[j] <= pivot) {
        i = i + 1;

        // swap array[i] and array[j]
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }//end if
    }//end for

    // swap 
    int temp = array[i + 1];
    array[i + 1] = array[upper];
    array[upper] = temp;

    return i + 1;

  }//end partition1

  static void quick_sort1(int[] array, int low, int high) {

    if (low < high) {

      int part_idx = partition1(array, low, high);

      quick_sort1(array, low, part_idx - 1);
      quick_sort1(array, part_idx + 1, high);
    }//end if

  }//end quick_sort1

  //iterative quick sort partition uses swap auxillary function
  static int partition2(int[] array, int lower, int upper) {

    int x = array[upper];
    int i = (lower - 1);
    for (int j = lower; j <= upper - 1; j++) {
      if (array[j] <= x) {
        i = i + 1;
        swap(array, i, j);
      }//end if
    }//end for
    swap(array, i + 1, upper);

    return (i + 1);

  }//end partition2

  //iterative quick sort algorithm
  static void quick_sort2(int[] array, int lower, int upper) {

    int[] var_array = new int[upper - lower + 1];
    int top = -1;
    var_array[++top] = lower;
    var_array[++top] = upper;

    while (top >= 0) {
      upper = var_array[top--];
      lower = var_array[top--];
      int p = partition2(array, lower, upper);

      if (p - 1 > lower) {
        var_array[++top] = lower;
        var_array[++top] = p - 1;
      }//end if

      if (p + 1 < upper) {
        var_array[++top] = p + 1;
        var_array[++top] = upper;
      }//end if
    }//end while

  }//end quick_sort2

  //3-way quicksort recursive
  static void quick_sort3(int[] array, int lower, int upper) {
    if (upper <= lower) {
      return;
    }

    int i = lower;
    int lesser = lower;
    int greater = upper;

    while (i <= greater) {
      if (array[i] < array[lesser]) {
        int tmp = array[i];
        array[i] = array[lesser];
        array[lesser] = tmp;

        i = i + 1;
        lesser = lesser + 1;
      } else if (array[lesser] < array[i]) {
        int tmp = array[i];
        array[i] = array[greater];
        array[greater] = tmp;

        greater--;
      } else {
        i = i + 1;
      }//end if
    }//end while

    quick_sort3(array, lower, lesser - 1);
    quick_sort3(array, greater + 1, upper);

  }//end quick_sort3

  begin {

    //generate 10-integers from 0...256 using seed
    int[] intList = randomArray(10, 256, 9876543210L);

    printArray(intList);

    //uncomment quick sort function want to demonstrate
    quick_sort1(intList, 0, intList.length - 1);   //recursive quick sort algorithm
    //quick_sort2(intList, 0, intList.length - 1); //iterative quick sort algorithm
    //quick_sort3(intList, 0, intList.length-1);     //3-way quick sort algorithm

    printArray(intList);

    exit(0);

  }//end begin

}//end prog QuickSort
