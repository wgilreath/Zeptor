/*
  
  Name: SudokuGenerator.zept

  Description: The program creates N x N Sudoku puzzle. Two parameters are N the 
               number of rows and columns (a perfect square); and then the parameter
               K for the number of empty places or slots, the missing digits for the
               Sudoku puzzle. 

  Author: William F. Gilreath (will@zepton.xyz)

  Copyright Â© 2024 William F. Gilreath. All Rights Reserved.

  License: This software is subject to the terms of the GNU General Public License (GPL)
  version 3.0 available at the following link: http://www.gnu.org/copyleft/gpl.html.
  You must accept the terms of the GNU General Public License (GPL) license agreement
  to use this software.
  
*/

package xyz.zepton.samples;

prog SudokuGenerator {

  int[] mat[];
  int N; // number of columns/rows.
  int SRN; // square root of N
  int K; // No. Of missing digits

  // Sudoku Generator
  void fillValues() {
    // Fill the diagonal of SRN x SRN matrices
    fillDiagonal();

    // Fill remaining blocks
    fillRemaining(0, SRN);

    // Remove Randomly K digits to make game
    removeKDigits();
    
  }//end fillValues

  // Fill the diagonal SRN number of SRN x SRN matrices
  void fillDiagonal() {

    for (int i = 0; i < N; i = i + SRN) { // for diagonal box, start coordinates->i==j
      fillBox(i, i);
    }//end for
    
  }//end fillDiagonal

  // Returns false if given 3 x 3 block contains num.
  boolean unUsedInBox(int rowStart, int colStart, int num) {
    
    for (int i = 0; i < SRN; i++) {
      for (int j = 0; j < SRN; j++) {
        if (mat[rowStart + i][colStart + j] == num) {
          return false;
        }//end if
      }//end for
    }//end for

    return true;
    
  }//end unUsedInBox

  // fill a 3 x 3 matrix.
  void fillBox(int row, int col) {
    int num;
    for (int i = 0; i < SRN; i++) {
      for (int j = 0; j < SRN; j++) {
        do {
          num = randomGenerator(N);
        } while (!unUsedInBox(row, col, num));

        mat[row + i][col + j] = num;
      }//end for
    }//end for
    
  }//end fillBox

  // random generator
  int randomGenerator(int num) {
    return (int) Math.floor((Math.random() * num + 1));
  }//end randomGenerator

  // check if safe to put in cell
  boolean CheckIfSafe(int i, int j, int num) {
    return (unUsedInRow(i, num)
            && unUsedInCol(j, num)
            && unUsedInBox(i - i % SRN, j - j % SRN, num));
  }//end CheckIfSafe

  // check in the row for existence
  boolean unUsedInRow(int i, int num) {
    for (int j = 0; j < N; j++) {
      if (mat[i][j] == num) {
        return false;
      }//end if
    }//end for
    
    return true;
  }//end unUsedInRow

  // check in the row for existence
  boolean unUsedInCol(int j, int num) {
    for (int i = 0; i < N; i++) {
      if (mat[i][j] == num) {
        return false;
      }//end if
    }//end for

    return true;
  }//end unUsedInCol

  // A recursive function to fill remaining matrix
  boolean fillRemaining(int i, int j) {
    // println(i+" "+j);
    if (j >= N && i < N - 1) {
      i = i + 1;
      j = 0;
    }//end if
    
    if (i >= N && j >= N) {
      return true;
    }//end if

    if (i < SRN) {
      if (j < SRN) {
        j = SRN;
      }//end if
    } else if (i < N - SRN) {
      if (j == (i / SRN) * SRN) {
        j = j + SRN;
      }//end if
    } else {
      if (j == N - SRN) {
        i = i + 1;
        j = 0;
        if (i >= N) {
          return true;
        }//end if
      }//end if
    }//end if

    for (int num = 1; num <= N; num++) {
      if (CheckIfSafe(i, j, num)) {
        mat[i][j] = num;
        if (fillRemaining(i, j + 1)) {
          return true;
        }//end if

        mat[i][j] = 0;
      }//end if
    }//end for
    return false;
  }//end fillRemaining

  // Remove the K no. of digits to complete puzzle
  void removeKDigits() {
    int count = K;
    while (count != 0) {
      int cellId = randomGenerator(N * N) - 1;

      // println(cellId);
      // extract coordinates i and j
      int i = (cellId / N);
      int j = cellId % 9;
      if (j != 0) {
        j = j - 1;
      }//end if

      // println(i+" "+j);
      if (mat[i][j] != 0) {
        count--;
        mat[i][j] = 0;
      }//end if
    }//end while
  }//end removeKDigits

  // print sudoku
  void printSudoku() {
    println();
    for (int i = 0; i < N; i++) {
      print("  ");
      for (int j = 0; j < N; j++) {
        if (mat[i][j] == 0) {
          print("* ");
        } else {
          print(mat[i][j] + " ");
        }//end if
      }//end for
      println();
    }//end for
    println();
  }//end printSudoku

  begin {

    final int N = 9, K = 20;

    me.N = N;
    me.K = K;

    // Compute square root of N
    Double SRNd = Math.sqrt(N);
    me.SRN = SRNd.intValue();
    me.mat = new int[N][N];

    me.fillValues();
    me.printSudoku();

    exit(0);

  }//end begin

}//end prog SudokuGenerator